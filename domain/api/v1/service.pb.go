// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/service.proto", fileDescriptor_42c32aec9010f89c) }

var fileDescriptor_42c32aec9010f89c = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd1, 0xb1, 0x4a, 0x43, 0x31,
	0x14, 0x06, 0x60, 0xb4, 0xe5, 0x5a, 0x23, 0x82, 0x3d, 0xad, 0x0e, 0x17, 0xa7, 0x8e, 0x1d, 0x6e,
	0xa8, 0x6e, 0x6e, 0x6a, 0xb1, 0x20, 0x1d, 0xc4, 0x6e, 0x2e, 0x12, 0xed, 0xa1, 0x04, 0xea, 0x3d,
	0x31, 0x39, 0x66, 0x11, 0x17, 0x07, 0x5f, 0xc0, 0x47, 0xf3, 0x15, 0x7c, 0x10, 0xc9, 0x4d, 0xa3,
	0xc6, 0xba, 0x04, 0xfe, 0xff, 0x27, 0xdf, 0x90, 0x88, 0xae, 0x32, 0x5a, 0x3a, 0xb4, 0x5e, 0xdf,
	0x63, 0x65, 0x2c, 0x31, 0x41, 0xa1, 0x8c, 0xae, 0xfc, 0xa8, 0xdc, 0x0b, 0xd3, 0x9c, 0x1e, 0x94,
	0xae, 0xe3, 0x52, 0x1e, 0x2e, 0x88, 0x16, 0x4b, 0x94, 0x61, 0x50, 0x75, 0x4d, 0xac, 0x58, 0x53,
	0xed, 0xe2, 0x7a, 0xf4, 0xd6, 0x12, 0x5b, 0x57, 0x64, 0xf9, 0xd4, 0x68, 0xb8, 0x14, 0xad, 0x09,
	0x32, 0x40, 0x15, 0xad, 0x6a, 0x82, 0x7c, 0x8d, 0x8f, 0x4f, 0xe8, 0xb8, 0xec, 0x65, 0x9d, 0x33,
	0x54, 0x3b, 0x1c, 0x94, 0xaf, 0x1f, 0x9f, 0xef, 0x9b, 0x7d, 0x00, 0xe9, 0x47, 0xd2, 0x90, 0x65,
	0xf9, 0x1c, 0xce, 0x5b, 0x3d, 0x7f, 0x81, 0xb1, 0x68, 0x4f, 0xb5, 0x63, 0xf8, 0xbe, 0x18, 0x52,
	0xd2, 0xfa, 0x79, 0xb9, 0xe2, 0xba, 0x0d, 0xb7, 0x03, 0xdb, 0x89, 0x73, 0x70, 0x21, 0xda, 0x33,
	0xe5, 0xf1, 0x47, 0x09, 0x69, 0x4d, 0x89, 0xe5, 0x4a, 0xe9, 0x35, 0xca, 0xee, 0xa0, 0x93, 0x94,
	0x93, 0x8d, 0x21, 0x4c, 0x45, 0x71, 0x6e, 0x51, 0x31, 0xc2, 0x7e, 0xba, 0x14, 0x73, 0xb2, 0x0e,
	0xfe, 0xd6, 0xb9, 0x56, 0x66, 0xda, 0x4c, 0x14, 0x63, 0x5c, 0xe2, 0x6f, 0x2d, 0xe6, 0x35, 0x2d,
	0xd5, 0xf9, 0x83, 0x0d, 0xff, 0x79, 0xb0, 0xb3, 0xce, 0x4d, 0xf8, 0x42, 0xe9, 0x47, 0x77, 0x45,
	0xf3, 0x33, 0xc7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x0c, 0x65, 0xe0, 0xe6, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PortApiClient is the client API for PortApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortApiClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type portApiClient struct {
	cc *grpc.ClientConn
}

func NewPortApiClient(cc *grpc.ClientConn) PortApiClient {
	return &portApiClient{cc}
}

func (c *portApiClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PortApi/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portApiClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PortApi/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portApiClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PortApi/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portApiClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PortApi/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portApiClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PortApi/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortApiServer is the server API for PortApi service.
type PortApiServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedPortApiServer can be embedded to have forward compatible implementations.
type UnimplementedPortApiServer struct {
}

func (*UnimplementedPortApiServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPortApiServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedPortApiServer) Save(ctx context.Context, req *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedPortApiServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPortApiServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPortApiServer(s *grpc.Server, srv PortApiServer) {
	s.RegisterService(&_PortApi_serviceDesc, srv)
}

func _PortApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PortApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortApiServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PortApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortApiServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortApi_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortApiServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PortApi/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortApiServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PortApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortApiServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PortApi/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortApiServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.PortApi",
	HandlerType: (*PortApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PortApi_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PortApi_List_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _PortApi_Save_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PortApi_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PortApi_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service.proto",
}
